// <auto-generated />
using System;
using ClinicAppointments.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicAppointments.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115173049_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClinicAppointments.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reason");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("specialty_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8193), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 10),
                            DoctorId = 1,
                            Notes = "Chequeo inicial",
                            PatientId = 1,
                            Reason = "Consulta de Oncología",
                            SpecialtyId = 1,
                            Status = "Pendiente"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8199), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 12),
                            DoctorId = 2,
                            Notes = "Prevención",
                            PatientId = 2,
                            Reason = "Consulta Cardiológica",
                            SpecialtyId = 2,
                            Status = "Confirmada"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8201), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 15),
                            DoctorId = 3,
                            Notes = "Dolor de cabeza recurrente",
                            PatientId = 3,
                            Reason = "Consulta Neurológica",
                            SpecialtyId = 3,
                            Status = "Pendiente"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8202), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 5),
                            DoctorId = 4,
                            Notes = "Revisión general",
                            PatientId = 4,
                            Reason = "Consulta Pediátrica",
                            SpecialtyId = 4,
                            Status = "Cancelada"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.AppointmentHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("action");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("remarks");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("appointment_histories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Consulta",
                            AppointmentId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8246), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 14),
                            Remarks = "Estoy muy enfermo"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Consulta",
                            AppointmentId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8250), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 13),
                            Remarks = "Estoy muy enfermo"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Consulta",
                            AppointmentId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8252), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 18),
                            Remarks = "Dolor constante de cabeza"
                        },
                        new
                        {
                            Id = 4,
                            Action = "Consulta",
                            AppointmentId = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8257), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 25),
                            Remarks = "Chequeo general"
                        },
                        new
                        {
                            Id = 5,
                            Action = "Consulta",
                            AppointmentId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8259), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 11),
                            Remarks = "Problemas respiratorios"
                        },
                        new
                        {
                            Id = 6,
                            Action = "Consulta",
                            AppointmentId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8261), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 20),
                            Remarks = "Prevención"
                        },
                        new
                        {
                            Id = 7,
                            Action = "Consulta",
                            AppointmentId = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8265), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 22),
                            Remarks = "Visión borrosa"
                        },
                        new
                        {
                            Id = 8,
                            Action = "Consulta",
                            AppointmentId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8266), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 12),
                            Remarks = "Sin complicaciones"
                        },
                        new
                        {
                            Id = 9,
                            Action = "Consulta",
                            AppointmentId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8268), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 23),
                            Remarks = "Dolor en los oídos"
                        },
                        new
                        {
                            Id = 10,
                            Action = "Consulta",
                            AppointmentId = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8270), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 30),
                            Remarks = "Sarpullido en la piel"
                        },
                        new
                        {
                            Id = 11,
                            Action = "Consulta",
                            AppointmentId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8271), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 16),
                            Remarks = "Chequeo general"
                        },
                        new
                        {
                            Id = 12,
                            Action = "Consulta",
                            AppointmentId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8273), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 21),
                            Remarks = "Revisión rutinaria"
                        },
                        new
                        {
                            Id = 13,
                            Action = "Consulta",
                            AppointmentId = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8275), new TimeSpan(0, 0, 0, 0, 0)),
                            Date = new DateOnly(2024, 11, 24),
                            Remarks = "Control de diabetes"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8076), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "johndoe@gmail.com",
                            Name = "Dr. John Doe",
                            Phone = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8080), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "janedoe@gmail.com",
                            Name = "Dr. Jane Doe",
                            Phone = "987654321"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8081), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "marydoe@gmail.com",
                            Name = "Dr. Mary Doe",
                            Phone = "876543210"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8082), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "peterdoe@gmail.com",
                            Name = "Dr. Peter Doe",
                            Phone = "765432198"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("specialty_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("doctor_specialties");
                });

            modelBuilder.Entity("ClinicAppointments.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateOnly>("DateBorn")
                        .HasColumnType("date")
                        .HasColumnName("date_born");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("document");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8149), new TimeSpan(0, 0, 0, 0, 0)),
                            DateBorn = new DateOnly(1985, 5, 20),
                            Document = "123456789",
                            Name = "John Doe",
                            Phone = "987654321"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Main St",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8159), new TimeSpan(0, 0, 0, 0, 0)),
                            DateBorn = new DateOnly(1990, 8, 15),
                            Document = "876543210",
                            Name = "Jane Doe",
                            Phone = "765432198"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Main St",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8161), new TimeSpan(0, 0, 0, 0, 0)),
                            DateBorn = new DateOnly(1982, 3, 10),
                            Document = "654321987",
                            Name = "Mary Doe",
                            Phone = "543219876"
                        },
                        new
                        {
                            Id = 4,
                            Address = "1011 Main St",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8162), new TimeSpan(0, 0, 0, 0, 0)),
                            DateBorn = new DateOnly(1975, 11, 30),
                            Document = "543219876",
                            Name = "Peter Doe",
                            Phone = "432198765"
                        },
                        new
                        {
                            Id = 5,
                            Address = "123 Main St",
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8163), new TimeSpan(0, 0, 0, 0, 0)),
                            DateBorn = new DateOnly(1985, 5, 20),
                            Document = "123456789",
                            Name = "John Doe",
                            Phone = "987654321"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Admin Role",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Employee Role",
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Description = "User Role",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cardiology",
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dermatology",
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Gastroenterology",
                            Name = "Gastroenterology"
                        },
                        new
                        {
                            Id = 4,
                            Description = "General Surgery",
                            Name = "General Surgery"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Neurology",
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Pediatrics",
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Plastic Surgery",
                            Name = "Plastic Surgery"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Psychiatry",
                            Name = "Psychiatry"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Urology",
                            Name = "Urology"
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctor_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 38, DateTimeKind.Unspecified).AddTicks(8308), new TimeSpan(0, 0, 0, 0, 0)),
                            DoctorId = 1,
                            Email = "admin@admin.com",
                            Name = "Admin",
                            PasswordHash = "$2a$11$bNC51utE3yB.x8PR.rwC4O6i2pr4DBlhFJINEfqPLeWFt1HiJVNnO",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 142, DateTimeKind.Unspecified).AddTicks(6011), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "receptionistNicolas@receptionist.com",
                            Name = "Receptionist Nicolas",
                            PasswordHash = "$2a$11$dHwu6YYyMmStZglnCNwUzuf4gnhjyfR3K88kj.OL4WLQolRvKtn4W",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 249, DateTimeKind.Unspecified).AddTicks(4350), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "receptionistJavier@receptionist.com",
                            Name = "Receptionist Javier",
                            PasswordHash = "$2a$11$Ax5HIFDl7fL87nskwcJw0ufXLQ5K/UyhLfIsdwIF6bOvCnweMUcxi",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 357, DateTimeKind.Unspecified).AddTicks(1159), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "receptionistMariana@receptionist.com",
                            Name = "Receptionist Mariana",
                            PasswordHash = "$2a$11$V0smBi8CrW31sxS8F8/HW.MXcPdm2lEImwWVZOLjh.2lsLiMdEmpm",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 17, 30, 49, 461, DateTimeKind.Unspecified).AddTicks(8529), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "receptionistJhon@receptionist.com",
                            Name = "Receptionist Jhon",
                            PasswordHash = "$2a$11$NT2tLoGyTijt4Otro.aMC.psC2e2TkyhIhbA1KEw6M6YrI0KcrRwO",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ClinicAppointments.Models.Appointment", b =>
                {
                    b.HasOne("ClinicAppointments.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAppointments.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAppointments.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicAppointments.Models.AppointmentHistory", b =>
                {
                    b.HasOne("ClinicAppointments.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicAppointments.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("ClinicAppointments.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicAppointments.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicAppointments.Models.User", b =>
                {
                    b.HasOne("ClinicAppointments.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ClinicAppointments.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
